using System;

namespace SecurityDroneTest
{
    /// <summary>
    /// Class we use to XOR our data encrypting and decrypting it respectively
    /// </summary>
    public static class EncryptorDecryptor
    {
        /// <summary>
        /// Our Encryptor method
        /// </summary>
        /// <param name="randNum">Psuedo random number generated by both Drone and Controller from a shared seed</param>
        /// <param name="cmmd">Input command data to be encrypted</param>
        /// <param name="clientKey">Cryptographically generated random number shared between the two</param>
        /// <returns>Encrypted drone command to be sent</returns>
        public static byte [] Encrypt(byte [] randNum, byte [] cmmd, byte [] clientKey)
        {
            return XOR(XOR(randNum, cmmd), clientKey);
        }

        /// <summary>
        /// Our implementation of our Decryptor idea
        /// </summary>
        /// <param name="randNum">Psuedo random number generated by both Drone and Controller from a shared seed</param>
        /// <param name="input">Command to be decrypted</param>
        /// <param name="clientKey">Cryptographically generated random number shared between the two</param>
        /// <returns>Decrypted drone input command</returns>
        public static byte [] Decrypt(byte [] randNum, byte [] input, byte [] clientKey)
        {
            return XOR(XOR(randNum, input), clientKey);
        }

        //Function from https://stackoverflow.com/questions/20802857/xor-function-for-two-hex-byte-arrays/20802965
        //by user TypeIA
        /// <summary>
        /// Helper function used to XOR byte arrays
        /// </summary>
        /// <param name="arr1">First byte[]</param>
        /// <param name="arr2">Second byte[]</param>
        /// <returns>XOR of the two input byte[]s</returns>
        public static byte[] XOR(byte[] arr1, byte[] arr2)
        {
            if (arr1.Length != arr2.Length)
                throw new ArgumentException("arrs are not the same length");

            byte[] result = new byte[arr1.Length];

            for (int i = 0; i < arr1.Length; ++i)
                result[i] = (byte)(arr1[i] ^ arr2[i]);

            return result;
        }
    }
}
